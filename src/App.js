import * as THREE from 'three'
import React, { Suspense, useEffect,  useRef, useState, forwardRef, useImperativeHandle } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { Environment, useGLTF, ContactShadows, OrbitControls, Html, useHelper } from '@react-three/drei'
// import { Environment, useGLTF, ContactShadows, OrbitControls, Html, useHelper } from '@react-three/drei'
import gsap from 'gsap'
import HeroPage from './HeroPage'
import { Center } from '@react-three/drei';


/*
Auto-generated by: https://github.com/pmndrs/gltsx*/

export function Model(props) {
  const { nodes, materials } = useGLTF('/l8niteoffice2.glb')
  return (
    <group {...props} dispose={null}>
      <IconLink url="mailto:taha.sarfraz11@gmail.com">
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_2.geometry}
            material={materials['Material.001']}
            position={[-0.957, 0.763, 1.084]}
            rotation={[0, 0, -3.121]}
            scale={[0.063, 0.394, 0.062]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_3.geometry}
            material={materials['Material.002']}
            position={[-0.957, 0.751, 1.084]}
            rotation={[0, 0, -3.121]}
            scale={[0.063, 0.4, 0.062]}
          />
        </group>
        </IconLink>
      <group position={[0, -0.004, 0]} rotation={[-Math.PI / 2, 0, 0]}>
      <IconLink url="https://github.com/GBG7">

        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group position={[455.882, 10, -142.771]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.GitHubLogo_GitHubLogo_0.geometry}
              material={materials['WindowsLogo2.001']}
              position={[-5.51, -0.577, 1.418]}
              rotation={[1.564, 0, 0]}
              scale={[0.281, 0.281, 0.635]}
            />
          </group>
        </group>
        </IconLink>
      </group>
      <IconLink url="https://www.instagram.com/tahasafs">
      <group position={[0, 0.069, -2.43]} rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Objeto_1_Tinta_0.geometry}
            material={materials.Tinta}
            position={[-106.458, 175.654, 155.42]}
            scale={[0.287, 0.287, 1]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Objeto_5_Tinta_0.geometry}
            material={materials.Tinta}
            position={[-106.458, 175.654, 155.42]}
            scale={[0.287, 0.287, 1]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Objeto_6_Tinta_0.geometry}
            material={materials.Tinta}
            position={[-106.458, 175.654, 155.42]}
            scale={[0.287, 0.287, 1]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes['Objeto_3_Tinta_(3)_0'].geometry}
            material={materials.Tinta_3}
            position={[-106.458, 175.654, 155.42]}
            scale={[0.287, 0.287, 1]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes['Objeto_4_Tinta_(3)_0'].geometry}
            material={materials.Tinta_3}
            position={[-106.458, 175.654, 155.42]}
            scale={[0.287, 0.287, 1]}
          />
        </group>
      </group>
      </IconLink>
      <group position={[-0.069, 0.112, 0]} rotation={[-Math.PI / 2, 0, 0]}>
      <IconLink url="https://www.linkedin.com/in/taha-s-54b429274/">
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group position={[-647.68, 42.351, 149.429]} scale={100}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.LinkedinLogo2_LinkedinLogo2_0.geometry}
              material={materials.PatreonLogo2_2}
              position={[5.584, 1.806, -2.234]}
              rotation={[-Math.PI, 0.059, -Math.PI]}
              scale={[0.321, 0.318, 0.998]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.LinkedinLogo2_LinkedinLogo2_2_0.geometry}
              material={materials.LinkedinLogo2_2}
              position={[5.584, 1.806, -2.234]}
              rotation={[-Math.PI, 0.059, -Math.PI]}
              scale={[0.321, 0.318, 0.998]}
            />
          </group>
        </group>
      </IconLink>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cone.geometry}
        material={materials['Material.003']}
        position={[1.647, 1.911, 1.132]}
        rotation={[3.03, 0, 0]}
        scale={[0.174, 0.151, 0.176]}
      />
      <group
        position={[-0.094, 2.433, 1.622]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
        scale={[-0.007, -0.014, -0.007]}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group position={[0, -0.001, -0.001]}>
            <group position={[0, -0.001, -0.001]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.Python_Python_0.geometry}
                material={materials.Python}
                position={[-26.886, -1.091, -28.528]}
                scale={0.621}
              />
            </group>
          </group>
        </group>
      </group>
      <group position={[0.16, 1.189, 1.788]} rotation={[-Math.PI / 2, 0, 0]} scale={0.38}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.geometry_0.geometry}
            material={materials.material_0}
            position={[2.735, 2.732, -0.515]}
            scale={[0.876, 0.876, 0.387]}
          />
        </group>
      </group>
      <group
        position={[-0.259, 1.47, 1.606]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={[0.051, 0.022, 0.051]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_0.geometry}
          material={materials.crate}
          position={[-3.008, -0.43, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_0.geometry}
          material={materials.crate}
          position={[-2.03, -0.43, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_0.geometry}
          material={materials.crate}
          position={[-1.07, -0.43, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube003_0.geometry}
          material={materials.crate}
          position={[-0.128, -0.43, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004_0.geometry}
          material={materials.crate}
          position={[0.832, -0.43, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube005_0.geometry}
          material={materials.crate}
          position={[-0.128, -0.43, 1.552]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube006_0.geometry}
          material={materials.crate}
          position={[-1.07, 0.439, 1.552]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube007_0.geometry}
          material={materials.crate}
          position={[-2.03, -0.43, 1.534]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube008_0.geometry}
          material={materials.crate}
          position={[-0.128, -0.43, 2.439]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube009_0.geometry}
          material={materials.crate}
          position={[-2.023, 0.528, 0.679]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010_0.geometry}
          material={materials.crate}
          position={[-0.128, 0.488, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube011_0.geometry}
          material={materials.crate}
          position={[-0.128, 0.469, 1.552]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube012_0.geometry}
          material={materials.crate}
          position={[-1.07, 0.481, 0.664]}
          scale={0.435}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere_0.geometry}
          material={materials.whale}
          position={[-1.546, 0, -0.072]}
          scale={2.731}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere001_0.geometry}
          material={materials.whale_outline}
          position={[-1.546, 0, -0.072]}
          scale={2.731}
        />
      </group>
      <group position={[0.469, 1.313, 1.585]} rotation={[-Math.PI / 2, 0, 0]} scale={0.032}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.ArrowBody_Material001_0.geometry}
            material={materials['Material.005']}
            position={[-13.076, 155.698, -20.264]}
            scale={16067.46}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.ArrowHead_Material001_0.geometry}
            material={materials['Material.005']}
            position={[593.304, 205.676, -20.264]}
            scale={16067.46}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.AWS_Material003_0.geometry}
            material={materials['Material.006']}
            position={[41.538, 612.01, -20.265]}
            scale={16067.46}
          />
        </group>
      </group>
      <group
        position={[2.217, -1.036, 0.161]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.8, 0.907, 0.863]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_R_Font_mat_0001.geometry}
            material={materials['Font_mat.007']}
            position={[2.556, -0.686, 0.019]}
            scale={[1, 1, 0.496]}
          />
        </group>
      </group>
      <group
        position={[2.217, -1.645, 1.174]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.8, 0.907, 0.863]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_A_Font_mat_0002.geometry}
            material={materials['Font_mat.008']}
            position={[4.23, -0.703, 0.019]}
            scale={[1, 1, 0.496]}
          />
        </group>
      </group>
      <group
        position={[2.217, -1.036, 0.15]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.8, 0.907, 0.863]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_A_Font_mat_0001.geometry}
            material={materials['Font_mat.009']}
            position={[4.23, -0.703, 0.019]}
            scale={[1, 1, 0.496]}
          />
        </group>
      </group>
      <group
        position={[2.217, -1.036, 1.22]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.8, 0.907, 0.863]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_a_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[6.964, 0, 0.019]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_A_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[4.23, -0.703, 0.019]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_F_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[2.625, -1.413, 0.019]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_H_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[0.705, -0.708, 0.019]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_R_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[2.556, -0.686, 0.019]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_S_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[0.666, -0.684, 0.019]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_T_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[-0.02, 0.027, 0.02]}
            scale={[1, 1, 0.496]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_Z_Font_mat_0.geometry}
            material={materials['Font_mat.006']}
            position={[0.385, -0.703, 0.019]}
            scale={[1, 1, 0.496]}
          />
        </group>
      </group>
      <group
        position={[2.203, -0.376, -0.047]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.401, 1, 0.401]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_S_Font_mat_0002.geometry}
            material={materials['Font_mat.012']}
            position={[4.522, -0.087, 0.024]}
            scale={[1, 1, 0.32]}
          />
        </group>
      </group>
      <group
        position={[2.203, -0.376, 1.029]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.401, 1, 0.401]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_t_Font_mat_0001.geometry}
            material={materials['Font_mat.011']}
            position={[5.961, 1.385, 0.024]}
            scale={[1, 1, 0.32]}
          />
        </group>
      </group>
      <group
        position={[2.203, -0.376, 0.826]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.401, 1, 0.401]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_S_Font_mat_0001.geometry}
            material={materials['Font_mat.013']}
            position={[4.478, -0.087, 0.024]}
            scale={[1, 1, 0.32]}
          />
        </group>
      </group>
      <group
        position={[2.203, -0.376, 1.473]}
        rotation={[-Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.401, 1, 0.401]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_a_Font_mat_0001.geometry}
            material={materials['Font_mat.010']}
            position={[10.136, 0.636, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_f_Font_mat_0.geometry}
            material={materials['Font_mat.010']}
            position={[2.346, 0.613, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_o_Font_mat_0.geometry}
            material={materials['Font_mat.010']}
            position={[4.273, 1.349, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_t_Font_mat_0.geometry}
            material={materials['Font_mat.010']}
            position={[5.961, 1.385, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_C_Font_mat_0.geometry}
            material={materials['Font_mat.010']}
            position={[5.635, -0.799, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_S_Font_mat_0003.geometry}
            material={materials['Font_mat.010']}
            position={[4.478, -0.087, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_T_Font_mat_0001.geometry}
            material={materials['Font_mat.010']}
            position={[2.321, -0.087, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_U_Font_mat_0.geometry}
            material={materials['Font_mat.010']}
            position={[0, -0.087, 0.024]}
            scale={[1, 1, 0.32]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Symbol_Ampersand_Font_mat_0.geometry}
            material={materials['Font_mat.010']}
            position={[3.04, 3.602, 0.024]}
            scale={[1, 1, 0.32]}
          />
        </group>
      </group>
      <group position={[2.6, -4.298, 0.1]} rotation={[-Math.PI / 2, 0, Math.PI / 2]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_a_Font_mat_0002.geometry}
            material={materials['Font_mat.016']}
            position={[3.33, 3.782, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_d_Font_mat_0.geometry}
            material={materials['Font_mat.016']}
            position={[1.323, 3.778, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_f_Font_mat_0001.geometry}
            material={materials['Font_mat.016']}
            position={[1.65, 3.783, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_l_Font_mat_0.geometry}
            material={materials['Font_mat.016']}
            position={[-1.336, 3.78, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_n_Font_mat_0.geometry}
            material={materials['Font_mat.016']}
            position={[2.621, 4.068, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_o_Font_mat_0001.geometry}
            material={materials['Font_mat.016']}
            position={[1.272, 4.065, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_r_Font_mat_0.geometry}
            material={materials['Font_mat.016']}
            position={[2.135, 4.065, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_u_Font_mat_0.geometry}
            material={materials['Font_mat.016']}
            position={[0.115, 4.062, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_C_Font_mat_0002.geometry}
            material={materials['Font_mat.016']}
            position={[0.584, 3.208, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_I_Font_mat_0.geometry}
            material={materials['Font_mat.016']}
            position={[0.465, 3.208, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_L_Font_mat_0002.geometry}
            material={materials['Font_mat.016']}
            position={[-2.084, 3.208, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_M_Font_mat_0001.geometry}
            material={materials['Font_mat.016']}
            position={[-2.55, 3.208, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Symbol_Plus_Font_mat_0001.geometry}
            material={materials['Font_mat.016']}
            position={[-0.914, 4.653, -0.374]}
            scale={[0.392, 0.392, 0.184]}
          />
        </group>
      </group>
      <group
        position={[-1.566, 0, 1.594]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={[0.663, 0.605, 0.663]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_A_Font_mat_0003.geometry}
            material={materials['Font_mat.017']}
            position={[4.119, -0.703, 0]}
            scale={[1, 1, 0.305]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_C_Font_mat_0003.geometry}
            material={materials['Font_mat.017']}
            position={[3.51, -0.71, 0]}
            scale={[1, 1, 0.305]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_K_Font_mat_0.geometry}
            material={materials['Font_mat.017']}
            position={[-0.689, -0.719, 0]}
            scale={[1, 1, 0.305]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_S_Font_mat_0004.geometry}
            material={materials['Font_mat.017']}
            scale={[1, 1, 0.305]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Letter_T_Font_mat_0002.geometry}
            material={materials['Font_mat.017']}
            position={[-0.109, 0, 0]}
            scale={[1, 1, 0.305]}
          />
        </group>
      </group>
      <group position={[2.163, 2.404, 1.989]} rotation={[-Math.PI / 2, 0, -Math.PI]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Symbol_Colon_Font_mat_0.geometry}
            material={materials['Font_mat.019']}
            position={[1.221, 0.108, 0.313]}
            scale={[0.449, 0.621, 0.626]}
          />
        </group>
      </group>
      <group position={[0, 0, 0.1]} rotation={[-Math.PI / 2, 0, -Math.PI]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Symbol_Colon_Font_mat_0001.geometry}
          material={materials['Font_mat.020']}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.TensorFlow.geometry}
        material={materials['Material.004']}
        position={[0.364, 2.253, 1.595]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.002}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text.geometry}
        material={nodes.Text.material}
        position={[-0.464, 1.892, 1.586]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.145}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text001.geometry}
        material={nodes.Text001.material}
        position={[0.087, 1.892, 1.586]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.145}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text002.geometry}
        material={nodes.Text002.material}
        position={[0.903, 1.899, 1.585]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.145}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text003.geometry}
        material={nodes.Text003.material}
        position={[-0.464, 1.122, 1.586]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.145}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text004.geometry}
        material={nodes.Text004.material}
        position={[0.319, 1.122, 1.579]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.145}
      />
      <group scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Boxes_BOXES_Mat_0.geometry}
          material={materials.BOXES_Mat}
          position={[9.951, 142.012, 2.406]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Room_ROOM_Mat_0.geometry}
          material={materials.ROOM_Mat}
          position={[-19.137, 168.453, -33.842]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Window_WINDOW_Mat_0.geometry}
          material={materials.WINDOW_Mat}
          position={[-19.521, 166.582, -28.049]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/l8niteoffice2.glb')

const DisplayHoverableCube = forwardRef(function HoverableCube(
  { position, rotation, scale, setOverlayVisible, overlayRef, setLastCameraPosition, content: ContentComponent, controlsRef }, // <-- Accepts a content prop
  ref
) {
  const [hovered, setHovered] = useState(false)
  const [clickable, setClickable] = useState(true)
  const [showHtml, setShowHtml] = useState(false)
  const { camera, controls } = useThree()
  const meshRef = useRef()

  
  // Expose a .reset() method to reset state
  useImperativeHandle(ref, () => ({
    reset() {
      setShowHtml(false) // Hide the HTML content
      setClickable(true) // Make the cube clickable again
      setOverlayVisible(false);      // 👈 hide overlay on reset
    }
  }))

const handleClick = () => {
  if (!clickable) return

  // ① remember where we were
  setLastCameraPosition([camera.position.x, camera.position.y, camera.position.z])

  // ② world-space centre of the cube we just clicked
  const target = meshRef.current.getWorldPosition(new THREE.Vector3())

  // ③ pick an offset (e.g. keep the current eye-to-target vector, 3 units long)
  const eyeVec = new THREE.Vector3()
    .subVectors(camera.position, controlsRef.current.target) // current view dir
    .setLength(0.9)                                            // <— distance you like
  const newCamPos = target.clone().add(eyeVec)

  // ④ tween camera **to** newCamPos
  gsap.to(camera.position, {
    x: newCamPos.x,
    y: newCamPos.y,
    z: newCamPos.z,
    duration: 1.5,
    ease: 'power2.out'
  })

  // ⑤ tween OrbitControls.target **to** the cube centre
 gsap.to(controlsRef.current.target, {
      x: target.x, y: target.y, z: target.z,
      duration: 1.5, ease: 'power2.out',
      onUpdate: () => controlsRef.current.update(),
      onComplete: () => {
        setOverlayVisible(true);          // mount overlay

        // wait one frame so <div> is in the DOM, then fade in
        requestAnimationFrame(() => {
          gsap.fromTo(
            overlayRef.current,
            { opacity: 0 },
            { opacity: 1, duration: 0.5, ease: 'power2.out' }
          );
        });

        setClickable(false);
        controlsRef.current.enableRotate = false;
        controlsRef.current.enablePan    = false;
      }
    });
  };
  return (
    <group>
      <mesh
        ref={meshRef}          
        castShadow
        receiveShadow
        position={position}
        rotation={rotation}
        scale={scale}
        onPointerOver={() => clickable && setHovered(true)}
        onPointerOut={() => clickable && setHovered(false)}
        onClick={handleClick}
        {...(!clickable && { pointerEvents: 'none' })}>
        <boxGeometry args={[1, 1, 1]} />
        <meshStandardMaterial color="black" transparent={true} opacity={0.01} />

        

      </mesh>

      {hovered && clickable && (
        <>
          {/* Original thin line */}
          <lineSegments position={position} rotation={rotation} scale={scale}>
            <edgesGeometry args={[new THREE.BoxGeometry(1, 1, 1)]} />
            <lineBasicMaterial color="white" />
          </lineSegments>

          {/* Slightly offset duplicates to create thickness */}
          <lineSegments position={position} rotation={rotation} scale={scale.map(s => s * 1.02)}>
            <edgesGeometry args={[new THREE.BoxGeometry(1, 1, 1)]} />
            <lineBasicMaterial color="white" />
          </lineSegments>

          <lineSegments position={position} rotation={rotation} scale={scale.map(s => s * 1.04)}>
            <edgesGeometry args={[new THREE.BoxGeometry(1, 1, 1)]} />
            <lineBasicMaterial color="white" />
          </lineSegments>

          <lineSegments position={position} rotation={rotation} scale={scale.map(s => s * 1.06)}>
            <edgesGeometry args={[new THREE.BoxGeometry(1, 1, 1)]} />
            <lineBasicMaterial color="white" />
          </lineSegments>
          
        </>
      )}

    </group>
  )
})


/**
 * IconLink is a wrapper that makes its children clickable.
 * When hovered, it displays a white BoxHelper outline.
 * On click, it opens the provided URL in a new browser tab.
 */

function IconLink({ children, url }) {
  const ref = useRef()
  const [hovered, setHovered] = useState(false)
  useHelper(hovered ? ref : null, THREE.BoxHelper, 'white') // White outline on hover

  const handleClick = (e) => {
    e.stopPropagation()
    window.open(url, '_blank') // Open URL in new tab
  }

  return (
    <group
      ref={ref}
      onClick={handleClick}
      onPointerOver={(e) => {
        e.stopPropagation()
        setHovered(true)
      }}
      onPointerOut={(e) => {
        e.stopPropagation()
        setHovered(false)
      }}>
      {children}
    </group>
  )
}


function ResetCameraButton({ lastCameraPosition, cubeRefs, controlsRef, setOverlayVisible,overlayRef }) {
  const handleReset = () => {
    if (!lastCameraPosition) return;
    const camera = controlsRef.current.object;

    gsap.to(camera.position, {
      x: lastCameraPosition[0], y: lastCameraPosition[1], z: lastCameraPosition[2],
      duration: 1.5, ease: 'power2.out',
      onComplete: () => {
        cubeRefs?.forEach(r => r.current?.reset());
        controlsRef.current.enableZoom   = true;
        controlsRef.current.enableRotate = true;
        controlsRef.current.enablePan    = true;

        // fade overlay out, then unmount it
        gsap.to(overlayRef.current, {
          opacity: 0,
          duration: 0.5,
          ease: 'power2.in',
          onComplete: () => setOverlayVisible(false)
        });
      }
    });
  };

  return (
    <button
      onClick={handleReset}
      style={{
        position: 'fixed',
        top: '20px',       // <-- distance from top
        right: '20px',      // <-- distance from left
        padding: '5px 10px',
        background: 'rgba(0,0,0,0.7)',
        color: 'white',
        border: '1px solid white',
        borderRadius: '8px',
        cursor: 'pointer',
        fontSize: '15px',
        zIndex: 1000       // <-- make sure it's above the canvas
      }}
    >
      ⏎
    </button>

  )
}




// useGLTF.preload('/l8niteoffice.glb')
export default function App() {
  const [showHelp, setShowHelp]               = useState(true);   // 👈 
  const [lastCameraPosition, setLastCameraPosition] = useState(null)
  const [overlayVisible, setOverlayVisible] = useState(false);  
  const heroPageCubeRef = useRef()
  const orbitRef = useRef()
  const timeoutRef                 = useRef();   // ← store the timer id
  const overlayRef = useRef(null);
  // const { camera } = useThree()
  useEffect(() => {
    const controls = orbitRef.current;
    if (!controls) return;

    const handleFirstInteraction = () => {
      setShowHelp(false);                     // vanish banner
      controls.removeEventListener('start', handleFirstInteraction);
    };

    controls.addEventListener('start', handleFirstInteraction);
    return () => controls.removeEventListener('start', handleFirstInteraction);
  }, []);                                     // run only once

  // Define reset handler here so it can be used in JSX below
  const handleReset = () => {
    if (!lastCameraPosition) return
    // pull the camera off of the controls
    const controls = orbitRef.current
    const camera = controls.object
    console.log('Resetting Camera to:', lastCameraPosition)

    gsap.to(camera.position, {
      x: lastCameraPosition[0],
      y: lastCameraPosition[1],
      z: lastCameraPosition[2],
      duration: 1.5,
      ease: 'power2.out',
      onComplete: () => {
        heroPageCubeRef.current?.reset()
      }
    })
  }

  return (
    <>
    {showHelp && (
        <div style={{
          position: 'fixed',
          top: 0, left: '50%', transform: 'translateX(-50%)',
          padding: '8px 14px',
          background: 'rgba(0,0,0,0.75)',
          color: 'white',
          fontSize: 14,
          borderRadius: 6,
          zIndex: 1100        /* above ⏎ button (1000) */
        }}>
          Click & drag to orbit • Scroll / pinch to zoom • Hover monitor for a surprise
        </div>
      )}
      <Canvas camera={{ position: [-8, 4, -5], fov: 45 }}>
        <pointLight position={[10, 10, 10]} intensity={1.5} />
        <Suspense fallback={null}>
          <Center disableY>
          <group rotation={[0, Math.PI, 0]} position={[0, -2, 0]} scale={[1.5, 1.5, 1.5]}>
            <Model />
            <DisplayHoverableCube
              ref={heroPageCubeRef}
              position={[1.6, 1.3, 1]}
              rotation={[Math.PI / 2, 0, -0.391]}
              scale={[0.4, 0.1, 0.4]}
              moveTo={[3.6, 9.3, 1]}
              setLastCameraPosition={setLastCameraPosition}
              controlsRef={orbitRef}
              setOverlayVisible={setOverlayVisible}     // 👈 NEW
              overlayRef={overlayRef}
            />
          </group>
          </Center>
          <Environment preset="city" />
        </Suspense>
        <ContactShadows position={[0, -4.5, 0]} scale={20} blur={2} far={4.5} />
        <OrbitControls
          ref={orbitRef}
          makeDefault
          enablePan={false}
          enableZoom={true}
          minPolarAngle={Math.PI / 2.2}
          maxPolarAngle={Math.PI / 2.2}
          minDistance={1}     
          maxDistance={15}    
          onStart={() => {
          // only start the timer once
          if (!timeoutRef.current) {
            timeoutRef.current = setTimeout(() => {
              setShowHelp(false);
            }, 5000);                         // 5 000 ms = 5 s
          }
        }}
        />
      </Canvas>

      {overlayVisible && (
        <div
          ref={overlayRef}                    
          style={{
            position: 'fixed',
            inset: 0,
            background: 'black',
            opacity: 0,                       /* start invisible */
            zIndex: 900
          }}
        >
          <iframe
            src="/lainsite/index.html"
            style={{ width: '100%', height: '100%', border: 'none' }}
          />
        </div>
      )}

      <ResetCameraButton
        lastCameraPosition={lastCameraPosition}
        cubeRefs={[heroPageCubeRef]}
        controlsRef={orbitRef}
        setOverlayVisible={setOverlayVisible}
        overlayRef={overlayRef}              
      />
    </>
  );
}

